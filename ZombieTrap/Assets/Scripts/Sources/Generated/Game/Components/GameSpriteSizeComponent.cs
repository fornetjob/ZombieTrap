//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Assets.Scripts.Features.Core.Sprites.SpriteSizeComponent spriteSize { get { return (Assets.Scripts.Features.Core.Sprites.SpriteSizeComponent)GetComponent(GameComponentsLookup.SpriteSize); } }
    public bool hasSpriteSize { get { return HasComponent(GameComponentsLookup.SpriteSize); } }

    public void AddSpriteSize(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.SpriteSize;
        var component = (Assets.Scripts.Features.Core.Sprites.SpriteSizeComponent)CreateComponent(index, typeof(Assets.Scripts.Features.Core.Sprites.SpriteSizeComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceSpriteSize(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.SpriteSize;
        var component = (Assets.Scripts.Features.Core.Sprites.SpriteSizeComponent)CreateComponent(index, typeof(Assets.Scripts.Features.Core.Sprites.SpriteSizeComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveSpriteSize() {
        RemoveComponent(GameComponentsLookup.SpriteSize);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSpriteSize;

    public static Entitas.IMatcher<GameEntity> SpriteSize {
        get {
            if (_matcherSpriteSize == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SpriteSize);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSpriteSize = matcher;
            }

            return _matcherSpriteSize;
        }
    }
}
